#!/usr/bin/env ruby

# newb:
# Creates a new keypair, security group and AMI with a pre-generated password
# that can be used to configure new windows instances.

require 'rubygems'
require 'bundler/setup'

require 'fog'
require 'chef/config'
require 'pathname'

chef_path = Pathname.new(__FILE__).dirname.join('..', '.chef')

config_file = chef_path.join('knife.rb')
Chef::Config.from_file(config_file.to_s)

compute = Fog::Compute.new(
  provider: 'AWS',
  aws_access_key_id: Chef::Config[:knife][:aws_access_key_id],
  aws_secret_access_key: Chef::Config[:knife][:aws_secret_access_key]
)

puts "Creating keypair..."
key_name = Chef::Config[:knife][:aws_ssh_key_id]
key_file = chef_path.join(key_name + '.pem')
unless key_file.exist?
  key = compute.key_pairs.create(name: key_name)
  key.write(key_file)
end

puts "Creating security group..."
security_group = key_name
unless compute.security_groups.any? { |g| g.name == security_group }
  group = compute.security_groups.create(
    name: security_group,
    description: "Created by #{ENV['USER']} via #{__FILE__}",
  )
  group.authorize_port_range(3389..3389)
  group.authorize_port_range(5985..5986)
end

puts "Launching prototype instance..."
server = compute.servers.create(
  tags:              { name: 'Windows prototype instance' },
  availability_zone: Chef::Config[:knife][:availability_zone],
  image_id:          'ami-2ccd6e45',
  flavor_id:         Chef::Config[:knife][:flavor],
  key_name:          key_name
)

print 'Waiting for password generation...'
server.wait_for { ready? }

encrypted_password = nil
while !encrypted_password
  password_data      = compute.get_password_data(server.id)
  encrypted_password = password_data.body['passwordData']
  print '.'
  sleep 1
end
puts

key      = OpenSSL::PKey::RSA.new(key_file.read)
password = key.private_decrypt(Base64.decode64(encrypted_password))

puts 'Creating image...'
response = compute.create_image(server.id, key_name, "Password is #{password}")
image_id = response.body["imageId"]

puts 'Destroying prototype server...'
server.destroy

puts <<-TXT
done.

Please ensure these lines are entered into #{config_file}:

    knife[:image]          = "#{image_id}"
    knife[:winrm_password] = "#{password}"

TXT
